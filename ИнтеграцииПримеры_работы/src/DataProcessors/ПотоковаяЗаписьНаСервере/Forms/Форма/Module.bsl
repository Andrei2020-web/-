&НаКлиенте
Процедура ПотоковаяЗапись(Команда)
	ПотоковаяЗаписьНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьДанные(Команда)
	
	Сообщение_ = Новый СообщениеПользователю();
	
	АдресРесурса = "/REST/odata/standard.odata/Catalog_Должности?$format=json";
	
//	Фомируем строку json c добавляемыми данными
	СтрокаТелаЗапроса = СформироватьДобавляемыДанные();
	
	Сообщение_.Текст = СтрокаТелаЗапроса;
	Сообщение_.Сообщить();
	
//	Отправить запрос на сервер
	ВыполнитьЗапрос("POST", АдресРесурса, СтрокаТелаЗапроса);
	 	
КонецПроцедуры
	
&НаСервереБезКонтекста
Функция СформироватьДобавляемыДанные()
	
//	Создать объект записи и записать знаение в строку
	Запись = Новый ЗаписьJSON();
	Запись.УстановитьСтроку();
	Запись.ЗаписатьНачалоОбъекта();
	Запись.ЗаписатьИмяСвойства("Description");
	Запись.ЗаписатьЗначение("Новая должность REST");
	Запись.ЗаписатьКонецОбъекта();
	
	СтрокаJSON = Запись.Закрыть();
	
	Возврат СтрокаJSON; 
	
КонецФункции

&НаКлиенте
Процедура ИзменитьДанные(Команда)
	
	Сообщение_ = Новый СообщениеПользователю();
	
	АдресРесурса = "/REST/odata/standard.odata/Catalog_Сотрудники(guid'af7d780a-b9e2-11ea-afce-3497f6e2632b')?$format=json";
	
//	Фомируем строку json c добавляемыми данными
	СтрокаТелаЗапроса = СформироватьИзменяемыеДанные();
	
	Сообщение_.Текст = СтрокаТелаЗапроса;
	Сообщение_.Сообщить();
	
//	Отправить запрос на сервер
	ВыполнитьЗапрос("PATCH", АдресРесурса, СтрокаТелаЗапроса);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СформироватьИзменяемыеДанные()
	
//	Создать объект записи и записать знаение в строку
	Запись = Новый ЗаписьJSON();
	Запись.УстановитьСтроку();
	Запись.ЗаписатьНачалоОбъекта();
//	меняем код
	Запись.ЗаписатьИмяСвойства("Code");
	Запись.ЗаписатьЗначение("REST-000000001");
//	Меняем дату рождения
	Запись.ЗаписатьИмяСвойства("ДатаРождения");
	Запись.ЗаписатьЗначение(ЗаписатьДатуJSON(ТекущаяДата(), ФорматДатыJSON.ISO, ВариантЗаписиДатыJSON.УниверсальнаяДата));
	
//Меняем должность
	Запись.ЗаписатьИмяСвойства("Должность@odata.bind");
	Запись.ЗаписатьЗначение("Catalog_Должности(guid'024e2392-c4f5-11ea-afe0-3497f6e2632b')");
	
	Запись.ЗаписатьКонецОбъекта();
	
	СтрокаJSON = Запись.Закрыть();
	
	Возврат СтрокаJSON; 
	
КонецФункции

&НаКлиенте
Процедура УдалитьДанные(Команда)

	АдресРесурса = "/REST/odata/standard.odata/Catalog_Должности(guid'024e2392-c4f5-11ea-afe0-3497f6e2632b')?$format=json";
	
//	Отправить запрос на сервер
	ВыполнитьЗапрос("DELETE", АдресРесурса, "");
	
КонецПроцедуры


&НаКлиенте
Процедура РазрешитьДоступODATA(Команда)
	РазрешитьДоступODATAНаСервере();
КонецПроцедуры

&НаСервереБезКонтекста
Процедура РазрешитьДоступODATAНаСервере()
	
	МДАнные = Новый Массив();
	МДАнные.Добавить("Справочник.Сотрудники");
	МДАнные.Добавить("Справочник.Должности");
	МДАнные.Добавить("Справочник.Поставщики");
	МДАнные.Добавить("Документ.ПоступлениеТоваров");
	МДАнные.Добавить("РегистрСведений.ЦеныТоваров");
	МДАнные.Добавить("Справочник.Товары");
	
	УстановитьСоставСтандартногоИнтерфейсаOData(МДАнные);
		
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьПоставщиков(Команда)

	СерверИсточник = "Localhost";
	Сообщение_ = Новый СообщениеПользователю;

	Попытка
//		Создать соединение с сервером
		HTTPСоединение = Новый HTTPСоединение(СерверИсточник);
	Исключение
		Сообщение_.Текст = "Не удалось соединиться с сервером";
		Сообщение_.Сообщить();
		Сообщение_.Текст = ОписаниеОшибки();
		Сообщение_.Сообщить();
		Возврат;
	КонецПопытки;
		
//	Сформировать строку URL
	АдресРесурса = "/REST/odata/standard.odata/Catalog_Поставщики?$format=json";
	
//	Создадим запрос
	HTTPЗапрос_ = Новый HTTPЗапрос(АдресРесурса);

	Попытка
		Результат = HTTPСоединение.Получить(HTTPЗапрос_);
		Сообщение_.Текст = Результат.ПолучитьТелоКакСтроку();
		Сообщение_.Сообщить();
	Исключение
		Сообщение_.Текст = ОписаниеОшибки();
		Сообщение_.Сообщить();
		Возврат;
	КонецПопытки;

КонецПроцедуры


&НаКлиенте
Процедура ПолучитьДанные(Команда)
	
//	Сформировать строку URL
	АдресРесурса = СокрЛП(Адрес);
	
//	отправить запрос на сервер
	ВыполнитьЗапрос("GET", АдресРесурса, "");

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗапрос(ИмяМетода, АдресРесурса, СтрокаТелаЗапроса)

	Сообщение = Новый СообщениеПользователю;
//Установить имя сервера
	СерверИсточник = "localhost";

	Попытка
//	Создать соединение с сервером localhost
		HTTPСоединение_ = Новый HTTPСоединение(СерверИсточник);
	Исключение
//		Вывести сообщение об ошибке соединения с сервером
		Сообщение.Текст = "Не удалось соединиться с сервером " + СерверИсточник;
		Сообщение.Сообщить();
		Сообщение.Текст = ОписаниеОшибки();
		Сообщение.Сообщить();
		Возврат;
	КонецПопытки;
	
//	Создать HTTP-запрос на основе URL
	HTTPЗапрос_ = Новый HTTPЗапрос(АдресРесурса);
	
//	Установим тело запроса из строки
	Если ИмяМетода <> "DELETE" Или ИмяМетода <> "GET" Тогда
		HTTPЗапрос_.УстановитьТелоИзСтроки(СтрокаТелаЗапроса);
	КонецЕсли;

	Попытка
//		Получить ответ сервера в виде объекта HTTPОтвет
		Результат = HTTPСоединение_.ВызватьHTTPМетод(ИмяМетода, HTTPЗапрос_);
//		Получить содержимое ответа сервера в виде строки
		Сообщение.Текст = Результат.ПолучитьТелоКакСтроку();
		Сообщение.Сообщить();
	Исключение
//		Вывести сообщение об ошибке при получении ответа с сервера
		Сообщение.Текст = ОписаниеОшибки();
		Сообщение.Сообщить();
		Возврат;
	КонецПопытки;
	
КонецПроцедуры


&НаКлиенте
Процедура ПроиндексироватьЦены(Команда)
	
//	Сформировать строку URL
	АдресРесурса = СокрЛП(Адрес);
	
//	отправить запрос на сервер
	ВыполнитьЗапрос("POST", АдресРесурса, "");
	
КонецПроцедуры


&НаКлиенте
Процедура СериализацияПрикладных(Команда)
	СериализацияПрикладныхНаСервере();
КонецПроцедуры


&НаСервере
Процедура СериализацияПрикладныхНаСервере()
	
	// Получить записываемый объект. 
	СсылкаНаОбъект = Справочники.Сотрудники.НайтиПоКоду("000000003");
	Объект_ = СсылкаНаОбъект.ПолучитьОбъект();
  // Создать объект записи и открыть файл, в который будет выполняться запись. 
	Запись = Новый ЗаписьJSON;
	ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Авто, Символы.Таб);
	Запись.ОткрытьФайл("C:\Users\Asus\Desktop\1С\Базы\Интеграции_Примеры работы\streamWrite.json", , ,
		ПараметрыЗаписиJSON);
  // Выполнить запись данных (Объект) с помощью объекта записи (Запись). 
	СериализаторXDTO.ЗаписатьJSON(Запись, Объект_, НазначениеТипаXML.Явное);
  // Завершить работу с файлом. 
	Запись.Закрыть();

КонецПроцедуры


&НаКлиенте
Процедура СериализацияТипаДата(Команда)
	СериализацияТипаДатаНаСервере();
КонецПроцедуры


&НаСервере
Процедура СериализацияТипаДатаНаСервере()
	
	// Создать структуру с данными контрагента. 
	Данные = Новый Структура;
	Данные.Вставить("Контрагент", "ОАО Фонтан");
	Данные.Вставить("Телефон", "81234567788");
	Данные.Вставить("ДатаИзменения", ТекущаяДата());
  // Создать объект записи и открыть файл, в который будет выполняться запись. 
	Запись = Новый ЗаписьJSON;
	ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Авто, Символы.Таб);
	Запись.ОткрытьФайл("C:\Users\Asus\Desktop\1С\Базы\Интеграции_Примеры работы\streamWrite.json", , ,
		ПараметрыЗаписиJSON);
  // Выполнить запись данных (Данные) с помощью объекта записи (Запись). 
	ЗаписатьJSON(Запись, Данные);
  // Завершить работу с файлом. 
	Запись.Закрыть();

КонецПроцедуры


&НаКлиенте
Процедура ДесериализацияТипаДата(Команда)
	ДесериализацияТипаДатаНаСервере();
КонецПроцедуры


&НаСервере
Процедура ДесериализацияТипаДатаНаСервере()
	
	// Создать объект чтения и открыть файл, из которого будет выполняться чтение. 
	Чтение = Новый ЧтениеJSON;
	Чтение.ОткрытьФайл("C:\Users\Asus\Desktop\1С\Базы\Интеграции_Примеры работы\streamWrite.json");
  // Выполнить чтение данных в структуру Данные с помощью объекта чтения (Чтение). 
	Данные = ПрочитатьJSON(Чтение, Ложь, "ДатаИзменения", ФорматДатыJSON.ISO);
  // Завершить работу с файлом. 
	Чтение.Закрыть();

 // Вывести результат чтения в сообщение. 
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = "Контрагент: " + Данные.Контрагент + ", Телефон: " + Данные.Телефон + ", Дата изменения: "
		+ Данные.ДатаИзменения;
	Сообщение.Сообщить();

КонецПроцедуры

&НаСервере
Процедура ПотоковаяЗаписьНаСервере()
	
// Задать параметры записи JSON.	
	ПараметрыJSON	=	Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Нет, "", Истина);
 
		
// Создать объект записи и открыть файл, в который будет выполняться запись. 
	Запись = Новый ЗаписьJSON;
	Запись.ОткрытьФайл("C:\Users\Asus\Desktop\1С\Базы\Интеграции_Примеры работы\streamWrite.json", , , ПараметрыJSON);

//	Записать	начало	корневого	объекта.	
	Запись.ЗаписатьНачалоОбъекта();	//	Записать	имя	свойства	корневого	объекта.

	Запись.ЗаписатьИмяСвойства("Контрагент1");
	Запись.ЗаписатьНачалоОбъекта(); 
	
// Заполнить Наименование Код типа Строка. 
	Запись.ЗаписатьИмяСвойства("Код");
	Запись.ЗаписатьЗначение("000000017"); 
  // Заполнить Наименование Наименование типа Строка. 
	Запись.ЗаписатьИмяСвойства("Наименование");
	Запись.ЗаписатьЗначение("ОАО Топаз"); 
  // Заполнить Наименование Телефоны типа Массив.
 // Поэтому после имени свойства записываем массив, состоящий из значений – строк. 
	Запись.ЗаписатьИмяСвойства("Телефоны");
	Запись.ЗаписатьНачалоМассива();
	Запись.ЗаписатьЗначение("8-999-777-55-33");
	Запись.ЗаписатьЗначение("+71112223344");
	Запись.ЗаписатьКонецМассива(); 
 // Заполнить Наименование ОбъемПродаж типа Число. 
	Запись.ЗаписатьИмяСвойства("ОбъемПродаж");
	Запись.ЗаписатьЗначение(5000000); 
 // Заполнить Наименование Поставщик? типа Булево. 
	Запись.ЗаписатьИмяСвойства("Поставщик?");
	Запись.ЗаписатьЗначение(Ложь); 
 // Записать конец нашего объекта. 
	Запись.ЗаписатьКонецОбъекта();
	Запись.ЗаписатьИмяСвойства("Контрагент2");
	Запись.ЗаписатьНачалоОбъекта(); 
	
// Заполнить Наименование Код типа Строка. 
	Запись.ЗаписатьИмяСвойства("Код");
	Запись.ЗаписатьЗначение("000000018"); 
  // Заполнить Наименование Наименование типа Строка. 
	Запись.ЗаписатьИмяСвойства("Наименование");
	Запись.ЗаписатьЗначение("ОАО Алмаз"); 
  // Заполнить Наименование Телефоны типа Массив.
 // Поэтому после имени свойства записываем массив, состоящий из значений – строк. 
	Запись.ЗаписатьИмяСвойства("Телефоны");
	Запись.ЗаписатьНачалоМассива();
	Запись.ЗаписатьЗначение("8-999-777-55-33");
	Запись.ЗаписатьЗначение("+71112223344");
	Запись.ЗаписатьКонецМассива(); 
 // Заполнить Наименование ОбъемПродаж типа Число. 
	Запись.ЗаписатьИмяСвойства("ОбъемПродаж");
	Запись.ЗаписатьЗначение(5000001); 
 // Заполнить Наименование Поставщик? типа Булево. 
	Запись.ЗаписатьИмяСвойства("Поставщик?");
	Запись.ЗаписатьЗначение(Истина); 
 // Записать конец нашего объекта. 
	Запись.ЗаписатьКонецОбъекта();
	
//	Записать	конец	корневого	объекта.	
	Запись.ЗаписатьКонецОбъекта();  
 // Завершить работу с файлом. 
	Запись.Закрыть();

КонецПроцедуры

&НаКлиенте
Процедура СериализацияСФункциейПреобразования(Команда)
	СериализацияСФункциейПреобразованияНаСервере();
КонецПроцедуры

&НаСервере
Процедура СериализацияСФункциейПреобразованияНаСервере()
	
	// Создать структуру с данными контрагента. 
	Данные = Новый Структура;
	Данные.Вставить("Контрагент", "ОАО Топаз");
	Данные.Вставить("ОбъемПродаж", 5000000);
 
 // Записать Наименование Адрес, имеющее тип ДанныеАдреса. 
	ДопИнфо = Новый ДанныеАдреса(Новый Структура("Город, Страна, Индекс", "Москва", "Россия", "112233"));
	Данные.Вставить("Адрес", ДопИнфо);
	Данные.Вставить("Поставщик", Ложь);
  // Создать объект записи и открыть файл, в который будет выполняться запись. 
	Запись = Новый ЗаписьJSON;
	ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Авто, Символы.Таб);
	Запись.ОткрытьФайл("C:\Users\Asus\Desktop\1С\Базы\Интеграции_Примеры работы\streamWrite.json", , ,
		ПараметрыЗаписиJSON);
  // Выполнить запись данных (Данные) с помощью объекта записи (Запись). 
	ЗаписатьJSON(Запись, Данные, , "ФункцияПреобразованияЗаписи", ЭтотОбъект);
  // Завершить работу с файлом. 
	Запись.Закрыть();

КонецПроцедуры

&НаКлиенте
Процедура ДесериализацияСФункциейВосстановлени(Команда)
	ДесериализацияСФункциейВосстановлениНаСервере();
КонецПроцедуры

&НаСервере
Процедура ДесериализацияСФункциейВосстановлениНаСервере()
	
	// Создать объект чтения и открыть файл, из которого будет выполняться чтение. 
	Чтение = Новый ЧтениеJSON;
	Чтение.ОткрытьФайл("C:\Users\Asus\Desktop\1С\Базы\Интеграции_Примеры работы\streamWrite.json");
  // Выполнить чтение данных в структуру Данные с помощью объекта чтения (Чтение).

	РеквизитыДляВосстановления = Новый Массив;
	РеквизитыДляВосстановления.Добавить("Телефоны");

	Данные = ПрочитатьJSON(Чтение, Ложь, , , "ФункцияВосстановленияЧтения", ЭтотОбъект, , РеквизитыДляВосстановления);
  // Завершить работу с файлом. 
	Чтение.Закрыть();
 
 // Вывести результат чтения в сообщение. 
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = "Контрагент: " + Данные.Контрагент + ", Объем продаж: " + Данные.ОбъемПродаж + ", Поставщик?: "
		+ Данные.Поставщик + ", Телефоны: ";
	Для Каждого Телефон Из Данные.Телефоны Цикл
		Сообщение.Текст = Сообщение.Текст + Телефон + ", ";
	КонецЦикла;
	Сообщение.Сообщить();
КонецПроцедуры
&НаСервере
Функция ФункцияВосстановленияЧтения(Свойство, Значение, ДополнительныеПараметры) Экспорт
	Если Свойство = "Телефоны" И ТипЗнч(Значение) = Тип("Массив") Тогда
		Телефоны = Новый Массив;
		Для Каждого Телефон Из Значение Цикл
			СтрокаТелефона = Лев(Телефон, 2) + "-" + Сред(Телефон, 3, 3) + "-" + Сред(Телефон, 6, 3) + "-" + "-" + Сред(
				Телефон, 9, 2) + "-" + Прав(Телефон, 2);
			Телефоны.Добавить(СтрокаТелефона);
		КонецЦикла;
		Возврат Телефоны;
	КонецЕсли;
КонецФункции
&НаСервере
Функция ФункцияПреобразованияЗаписи(Свойство, Значение, ДополнительныеПараметры, Отказ) Экспорт

	Если Свойство = "Адрес" Тогда
		Адрес = "Страна: " + Значение.Страна + ", Индекс: " + Значение.Индекс + ", Город: " + Значение.Город;
		Возврат Адрес;
	КонецЕсли;
	Отказ = Истина;

КонецФункции

&НаКлиенте
Процедура СериализацияПростыхТипов(Команда)
	СериализацияПростыхТиповНаСервере();
КонецПроцедуры

&НаСервере
Процедура СериализацияПростыхТиповНаСервере()
	
// Создать структуру с данными контрагента. 
	Данные = Новый Структура;
	Данные.Вставить("Контрагент", "ОАО Топаз");
	Данные.Вставить("ОбъемПродаж", 5000000);
 
// Добавить элемент структуры Телефоны типа Массив. 
	Телефоны = Новый Массив;
	Телефоны.Добавить("+71112223344");
	Телефоны.Добавить("+79998887766");
	Данные.Вставить("Телефоны", Телефоны);
	Данные.Вставить("Поставщик", Ложь);
 // Создать объект записи и открыть файл, в который будет выполняться запись. 
	Запись = Новый ЗаписьJSON;
	ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Авто, Символы.Таб);
	Запись.ОткрытьФайл("C:\Users\Asus\Desktop\1С\Базы\Интеграции_Примеры работы\streamWrite.json", , ,
		ПараметрыЗаписиJSON);
 // Выполнить запись данных (Данные) с помощью объекта записи (Запись). 
	ЗаписатьJSON(Запись, Данные);
// Завершить работу с файлом. 
	Запись.Закрыть();

КонецПроцедуры

&НаКлиенте
Процедура ДесериализацияПростыхТипов(Команда)
	ДесериализацияПростыхТиповНаСервере();
КонецПроцедуры

&НаСервере
Процедура ДесериализацияПростыхТиповНаСервере()

// Создать объект чтения и открыть файл, из которого будет выполняться чтение. 
	Чтение = Новый ЧтениеJSON;
	Чтение.ОткрытьФайл("C:\Users\Asus\Desktop\1С\Базы\Интеграции_Примеры работы\streamWrite.json");
// Выполнить чтение данных в структуру Данные с помощью объекта чтения (Чтение). 
	Данные = ПрочитатьJSON(Чтение, Истина);

 // Завершить работу с файлом. 
	Чтение.Закрыть(); // Вывести результат чтения в сообщение. 
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = "Контрагент: " + Данные["Контрагент №2"] + ", Объем продаж: " + Данные["Объем Продаж"] + ", Поставщик?: "
		+ Данные["Поставщик"] + ", Телефоны: " + Данные["Телефоны"];
  // Обойти в цикле элемент структуры данных Телефоны типа Массив. 
//	Для Каждого Телефон Из Данные.Телефоны Цикл
//		Сообщение.Текст = Сообщение.Текст + Телефон + ", ";
//	КонецЦикла;
	Сообщение.Сообщить();

КонецПроцедуры

&НаКлиенте
Процедура ПотоковоеЧтение(Команда)
	ПотоковоеЧтениеНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПотоковоеЧтениеНаСервере()

	Сообщение = Новый СообщениеПользователю;
 // Создать объект чтения и открыть файл, из которого будет выполняться чтение. 
	Чтение = Новый ЧтениеJSON;
	Чтение.ОткрытьФайл("C:\Users\Asus\Desktop\1С\Базы\Интеграции_Примеры работы\streamWrite.json");
  // Выполнить чтение поэлементно в цикле. 
	Пока Чтение.Прочитать() Цикл
		Если Чтение.ТипТекущегоЗначения = ТипЗначенияJSON.ИмяСвойства Тогда
			Сообщение.Текст = "Имя = " + Чтение.ТекущееЗначение;
			Сообщение.Сообщить();
		КонецЕсли;

		Если Чтение.ТипТекущегоЗначения = ТипЗначенияJSON.Булево Или Чтение.ТипТекущегоЗначения = ТипЗначенияJSON.Строка
			Или Чтение.ТипТекущегоЗначения = ТипЗначенияJSON.Число Или Чтение.ТипТекущегоЗначения
			= ТипЗначенияJSON.Комментарий Тогда
			Сообщение.Текст = "Значение = " + Чтение.ТекущееЗначение;
			Сообщение.Сообщить();
		КонецЕсли;
	КонецЦикла;
	
  // Завершить работу с файлом. 
	Чтение.Закрыть();

КонецПроцедуры

&НаКлиенте
Процедура РаботаСоСтрокой(Команда)
	РаботаСоСтрокойНаСервере();
КонецПроцедуры

&НаСервере
Процедура РаботаСоСтрокойНаСервере()

	Сообщение = Новый СообщениеПользователю;
  // Создать объект записи и записать строковое значение в строку JSON. 
	Запись = Новый ЗаписьJSON;
	Запись.УстановитьСтроку();
	Запись.ЗаписатьЗначение("строковое значение");
	СтрокаJSON	=	Запись.Закрыть();
  // Показать результат. 
	Сообщение.Текст = СтрокаJSON;
	Сообщение.Сообщить();
  // Создать объект чтения и прочитать JSON из строки. 
	Чтение = Новый ЧтениеJSON;
	Чтение.УстановитьСтроку(СтрокаJSON);
	Пока Чтение.Прочитать() Цикл
		Если Чтение.ТипТекущегоЗначения = ТипЗначенияJSON.ИмяСвойства Тогда
			Сообщение.Текст = "Имя = " + Чтение.ТекущееЗначение;
			Сообщение.Сообщить();
		КонецЕсли;
		Если Чтение.ТипТекущегоЗначения = ТипЗначенияJSON.Булево Или Чтение.ТипТекущегоЗначения
			= ТипЗначенияJSON.Строка Или Чтение.ТипТекущегоЗначения = ТипЗначенияJSON.Число
			Или Чтение.ТипТекущегоЗначения = ТипЗначенияJSON.Комментарий Тогда
			Сообщение.Текст = "Значение = " + Чтение.ТекущееЗначение;
			Сообщение.Сообщить();
		КонецЕсли;
	КонецЦикла;
  // Завершить чтение. Чтение.Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура ДесериализацияПрикладныхТипов(Команда)
	ДесериализацияПрикладныхТиповНаСервере();
КонецПроцедуры

&НаСервере
Процедура ДесериализацияПрикладныхТиповНаСервере()
	
// Создать объект чтения и открыть файл, из которого будет выполняться чтение. 
	Чтение = Новый ЧтениеJSON;
	Чтение.ОткрытьФайл("C:\Users\Asus\Desktop\1С\Базы\Интеграции_Примеры работы\streamWrite.json");
  // Выполнить чтение данных в структуру Данные с помощью объекта чтения (Чтение).	
	Данные	=	СериализаторXDTO.ПрочитатьJSON(Чтение);
  // Завершить работу с файлом. 
	Чтение.Закрыть();
  // Вывести результат чтения в сообщение. 
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = "Код: " + Данные.Code + ", ФИО: " + Данные.Description;
	Сообщение.Сообщить();

КонецПроцедуры

&НаКлиенте
Процедура СовмещениеТехникНаСервере(Команда)
	СовмещениеТехникНаСервереНаСервере();
КонецПроцедуры

&НаСервере
Процедура СовмещениеТехникНаСервереНаСервере()

	СписокОплат = Документы.ОплатаПоставщикам.Выбрать();
  // Создать настройки сериализации для записи дат.

	НастройкиСериализации = Новый НастройкиСериализацииJSON;
	НастройкиСериализации.ВариантЗаписиДаты = ВариантЗаписиДатыJSON.УниверсальнаяДата;
	НастройкиСериализации.ФорматСериализацииДаты = ФорматДатыJSON.ISO;
	НастройкиСериализации.СериализовыватьМассивыКакОбъекты = Истина;
  // Задать параметры записи JSON. 
	ПараметрыJSON = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Авто, "", Истина);
  // Создать объект записи и открыть файл, в который будет выполняться запись. 
	Запись = Новый ЗаписьJSON;
	Запись.ПроверятьСтруктуру = Истина;
	Запись.ОткрытьФайл("C:\Users\Asus\Desktop\1С\Базы\Интеграции_Примеры работы\streamWrite.json", , , ПараметрыJSON);
  // Выполнить запись значений с помощью объекта записи (Запись). // Записать начало корневого объекта. 
	Запись.ЗаписатьНачалоОбъекта();
	Запись.ЗаписатьИмяСвойства("ДатаФормирования");
	Запись.ЗаписатьЗначение(ЗаписатьДатуJSON(ТекущаяДата(), ФорматДатыJSON.ISO,
		ВариантЗаписиДатыJSON.УниверсальнаяДата));
	Запись.ЗаписатьИмяСвойства("Оплаты");
  // Создать массив структур с данными документа ОплатаПоставщикам. 
	Оплаты = Новый Массив;
	Пока СписокОплат.Следующий() Цикл
		ОплатаПоставщику = Новый Структура("Ссылка, Номер, Дата, Поставщик, Сумма");
		ОплатаПоставщику.Ссылка = Строка(СписокОплат.Ссылка);
		ОплатаПоставщику.Номер = СписокОплат.Номер;
		ОплатаПоставщику.Дата = СписокОплат.Дата;
		ОплатаПоставщику.Поставщик = Строка(СписокОплат.Поставщик);
		ОплатаПоставщику.Сумма = СписокОплат.Сумма;
		Оплаты.Добавить(ОплатаПоставщику);
	КонецЦикла;
  // Выполнить запись данных (Оплаты) с помощью объекта записи (Запись). 
	ЗаписатьJSON(Запись, Оплаты, НастройкиСериализации);
  // Записать конец корневого объекта. 
	Запись.ЗаписатьКонецОбъекта();
  // Завершить работу с файлом. 
	Запись.Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСотрудника(Команда)
	
//	Сформировать строку URL
	АдресРесурса = СокрЛП(Адрес);
	
//	отправить запрос на сервер
	ВыполнитьЗапрос("DELETE", АдресРесурса, "");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьДанные(Команда)
	
	Сообщение_ = Новый СообщениеПользователю();
	
	АдресРесурса = "/REST/odata/standard.odata/Document_ПоступлениеТоваров_Товары(guid'16a4be63-c37a-11ea-afde-3497f6e2632b')?$format=json";
	
//	Фомируем строку json c изменяемыми данными
	СтрокаТелаЗапроса = СформироватьИзменяемыеДанныеТЧ();
	
	Сообщение_.Текст = СтрокаТелаЗапроса;
	Сообщение_.Сообщить();
	
//	Отправить запрос на сервер
	ВыполнитьЗапрос("PATCH", АдресРесурса, СтрокаТелаЗапроса);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СформироватьИзменяемыеДанныеТЧ()

//	Создаем объект записи
	Запись_ = Новый ЗаписьJSON();
	Запись_.УстановитьСтроку();
	
//	Начало корневого объека
	Запись_.ЗаписатьНачалоОбъекта();
	
	Запись_.ЗаписатьИмяСвойства("Number");
	Запись_.ЗаписатьЗначение("000000777");
	
	Запись_.ЗаписатьИмяСвойства("Date");
	Запись_.ЗаписатьЗначение(ЗаписатьДатуJSON(ТекущаяДата(), ФорматДатыJSON.ISO, 
		ВариантЗаписиДатыJSON.УниверсальнаяДата));
	
//	Изменяем состав ТЧ
	Запись_.ЗаписатьИмяСвойства("Товары@odata.type");
	Запись_.ЗаписатьЗначение("Collection(StandardODATA.Document_ПоступлениеТоваров_Товары_RowType)");
	
	Запись_.ЗаписатьИмяСвойства("Товары");
	Запись_.ЗаписатьНачалоМассива();
	
	
//	Записать полностью первую строку ТЧ
	Запись_.ЗаписатьНачалоОбъекта();
	Запись_.ЗаписатьИмяСвойства("LineNumber");
	Запись_.ЗаписатьЗначение("1");
	Запись_.ЗаписатьИмяСвойства("Количество");
	Запись_.ЗаписатьЗначение(2);
	Запись_.ЗаписатьИмяСвойства("Товар_Key");
	Запись_.ЗаписатьЗначение("8a62c623-bf94-11ea-afd5-3497f6e2632b");
	Запись_.ЗаписатьКонецОбъекта();
	
//	Записать полностью вторую строку ТЧ
	Запись_.ЗаписатьНачалоОбъекта();
	Запись_.ЗаписатьИмяСвойства("LineNumber");
	Запись_.ЗаписатьЗначение("2");
	Запись_.ЗаписатьИмяСвойства("Количество");
	Запись_.ЗаписатьЗначение(3);
	Запись_.ЗаписатьИмяСвойства("Товар_Key");
	Запись_.ЗаписатьЗначение("8a62c624-bf94-11ea-afd5-3497f6e2632b");
	Запись_.ЗаписатьКонецОбъекта();
	
	Запись_.ЗаписатьКонецМассива();
	Запись_.ЗаписатьКонецОбъекта();
	
	СтрокаJson = Запись_.Закрыть();
	
	Возврат СтрокаJson;
	
КонецФункции

